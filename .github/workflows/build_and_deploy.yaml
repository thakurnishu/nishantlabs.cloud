name: Build And Deploy

env:
  WORKLOAD_IDENTITY: 'projects/307684202109/locations/global/workloadIdentityPools/workload-identity-pool/providers/github-thakurnishu'
  SERVICE_ACCOUNT: 'imagepusher-nishantlabs@org-identity-hub-471410.iam.gserviceaccount.com'
  GCP_ARTIFACT_REGION: 'us-central1'
  GCP_PROJECT_ID: 'nishantlabs'
  GCP_ARTIFACT_REGISTRY: 'nishantlabs'
  IMAGE_NAME: 'portfolio'
  WORKING_DIR: 'app'
  GITHUB_EMAIL: 'github-actions[bot]@users.noreply.github.com'
  GITHUB_USERNAME: 'github-actions[bot]'
  BASE_BRANCH: 'monolith'

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'build and push'
        default: 'build and push' 

jobs:
  build-and-deploy:
    permissions:
      contents: 'write'
      id-token: 'write'
      pull-requests: 'write'
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        persist-credentials: true

    - id: 'applierAuth'
      if: github.event_name == 'workflow_dispatch'
      uses: ./.github/actions/authenticate-gcp
      with:
        workload_identity_provider: ${{ env.WORKLOAD_IDENTITY }}
        service_account: ${{ env.SERVICE_ACCOUNT }} 

    - name: 'Set up Cloud SDK'
      if: github.event_name == 'workflow_dispatch'
      uses: 'google-github-actions/setup-gcloud@v2'
      with:
        version: '>= 363.0.0'

    - name: Configure Docker to use the gcloud command-line tool as a credential helper
      run: |
        gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://us-central1-docker.pkg.dev

    - name: Build and push Docker image to Google Artifact Registry
      working-directory: ${{ env.WORKING_DIR }}
      run: |
        commit_id=$(git rev-parse HEAD)
        IMAGE_REPO="${{ env.GCP_ARTIFACT_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}"
        docker build -t "${IMAGE_REPO}:${commit_id}" .
        docker push "${IMAGE_REPO}:${commit_id}"

    - uses: hashicorp/setup-terraform@v3

    - name: Update tfvars file
      id: update-tfvars
      run: |
        commit_id=$(git rev-parse HEAD)
        BRANCH="update-image-${commit_id}"
        IMAGE_REPO="${{ env.GCP_ARTIFACT_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.IMAGE_NAME }}"
        new_image="${IMAGE_REPO}:${commit_id}"

        git config --global user.email "${{ env.GITHUB_EMAIL }}"
        git config --global user.name "${{ env.GITHUB_USERNAME }}"
        git checkout -b $BRANCH

        sed -i "s|^image[[:space:]]*=.*|image = \"$new_image\"|" infra/terraform.tfvars

        terraform fmt infra/terraform.tfvars
        git add infra/terraform.tfvars

        if git diff --cached --quiet; then
          echo "No changes to commit. Skipping commit and PR creation."
          echo "skip_pr=true" >> $GITHUB_ENV
          exit 0
        fi

        git commit -m "chore(terraform): update image to ${commit_id}"
        git push origin $BRANCH || true

        # âœ… Set output variable
        echo "branch=${BRANCH}" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      if: env.skip_pr != 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh pr create \
        --title "Update Terraform image" \
        --body "$(cat <<EOF
        This PR updates the container image tag to the latest image in \`terraform.tfvars\`.

        Auto-generated by GitHub Actions.
        EOF
        )" \
          --base ${{ env.BASE_BRANCH }} \
          --head ${{ steps.update-tfvars.outputs.branch }}
